package part02.chapter18;

import java.util.HashSet;
import java.util.LinkedHashSet;

/**
 * Пример использования классов HashSet (набор, хеш-множество - коллекция на основе хеш-таблицы) и
 * LinkedHashSet (связанный список элементов хеш-множества, поддерживающий итерацию элементов в порядке их добавления).
 * Сохраняется ключ и значение.
 * Ключ получается автоматически из значения элемента путём его хеширования (получения уникального хеш-кода).
 * Хеш-код служит индексом, по которому сохраняются данные элемента.
 * Значения по умолчанию:
 * ёмкость хеш-множества = 16;
 * коэффициент заполнения = 0.75 (насколько заполненным должно быть хеш-множество для автоматического увеличения
 * его размера; изменяется от 0 до 1).
 * Преимущество хеширования: оно обеспечивает постоянное время выполнения методов add, contains, remove, size
 * (независимо от размера множества).
 */
class HashSetDemo {
    public static void main(String[] args) {

        HashSet<String> hs = new HashSet<String>();

        hs.add("Бета");
        hs.add("Альфа");
        hs.add("Эта");
        hs.add("Гамма");
        hs.add("Эпсилон");
        hs.add("Омега");

        // элементы в хеш-множестве не отсортированны, их порядок может изменяться, не соответсвовать порядку добавления
        System.out.println("Содержимое коллекции hs: " + hs); // [Альфа, Гамма, Омега, Эпсилон, Бета, Эта]

        LinkedHashSet<String> lhs = new LinkedHashSet<String>();

        lhs.add("Бета");
        lhs.add("Альфа");
        lhs.add("Эта");
        lhs.add("Гамма");
        lhs.add("Эпсилон");
        lhs.add("Омега");

        // элементы в связанном хеш-множестве итерируются в порядке их добавления
        System.out.println("Содержимое коллекции lhs: " + lhs); // [Бета, Альфа, Эта, Гамма, Эпсилон, Омега]
    }
}
