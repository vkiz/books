package part02.chapter19;

import java.util.Timer;
import java.util.TimerTask;

/**
 * Класс планируемого задания (задачи).
 * Действие выполняется в методе run().
 * Метод run() объявлен в интерфейсе Runnable (TimerTask implements Runnable).
 * Действие выполняется в обычном потоке исполнения (тогда по завершении программы
 * нужно вызвать метод cancel() класса Timer, чтобы прервать это задание)
 * или потоке-демоне (он выполняется только до тех пор, пока выполняется остальная часть программы)
 * в зависимости от параметра boolean, передаваемого в конструктор класса Timer.
 */
class MyTimerTask extends TimerTask {
    @Override
    public void run() {
        System.out.println("Выполняется задание...");
    }
}

/**
 * Пример планирования запуска задания.
 * Один объект класса Timer может одновременно запускать тысячи запланированных заданий,
 * является потокобезопасным (не требует синхронизации).
 * Внутри он использует двоичную кучу для представления очереди заданий,
 * стоимость планирования n-заданий равна O(log n).
 */
class TimerTaskDemo {
    public static void main(String[] args) {

        // создание задания
        MyTimerTask task = new MyTimerTask();

        // создание таймера - планировщика задач
        Timer timer = new Timer();

        // планирование запуска задания
        // задержка перед первым запуском - 1000 мс,
        // период между запусками - примерно 500 мс
        timer.schedule(task, 1000, 500);

        // задержка 5 сек,
        // в это время будут выполняться запланированные задания
        try {
            Thread.sleep(5000);
        } catch (InterruptedException ex) {
            System.out.println("Ожидание прервано");
        }

        // прервать выполнение заданий
        timer.cancel();
    }
}
