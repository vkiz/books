package part01.chapter15;

/**
 * Класс с двумя конструкторами.
 */
class MyClass1 {

    private int val;

    /**
     * Конструктор, принимающий один аргумент.
     * @param v параметр конструктора
     */
    MyClass1(int v) {
        val = v;
    }

    /**
     * Конструктор по умолчанию.
     */
    MyClass1() {
        val = 0;
    }

    int getVal() {
        return val;
    }
}

/**
 * Функциональный интерфейс,
 * метод которого возвращает ссылку на класс MyClass1.
 */
interface MyFunc1 {
    MyClass1 func(int n);
}

/**
 * Пример использования ссылки на конструктор класса.
 * имя_класса::new
 * Эта ссылка может быть присвоена любой ссылке на функциональный интерфейс,
 * в котором определяется метод, совместимый с конструктором.
 */
class RefToConstructor {

    public static void main(String[] args) {

        // создание ссылки на конструктор класса MyClass1;
        // метод func() из интерфейса МyFunc1 принимает аргумент, поэтому оператор new обращается к параметризированному
        // конструктору класса МyClass1, а не к его конструктору по умолчанию
        MyFunc1 constructor = MyClass1::new;

        // создание экземпляра класса, используя ссылку на его конструктор
        MyClass1 mc = constructor.func(100);

        System.out.println("Значение val в объекте mc равно: " + mc.getVal()); // 100
    }
}
