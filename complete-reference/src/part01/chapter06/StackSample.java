package part01.chapter06;

/**
 * Пример реализации класса стека.
 * Данные в стеке хранятся по принципу LIFO (акроним Last In, First Out, "последним пришёл - первым ушёл").
 * Самый верхний элемент стека, который добавлен последним, извлекается самым первым.
 * Для управления стеком служат две операции: помещение в стек (push) и извлечение из стека (pop).
 * Аналогия со стопкой книг.
 */

/**
 * Класс стека, в котором можно хранить до 10 целочисленных значений.
 */
class Stack {
    int stck[] = new int[10]; // массив для хранения значений
    int tos; // переменная, содержащая значение индекса вершины стека

    // Конструктор класса - инициализация вершины стека
    Stack() {
        tos = -1; // пустой стек
    }

    // Помещение элемента в вершину стека
    void push(int item) {
        if (tos == 9) {
            System.out.println("Стек заполнен");
        } else {
            stck[++tos] = item;
            System.out.println("Помещено значение " + item);
        }
    }

    // Извлечение элемента из вершины стека
    int pop() {
        if (tos < 0) {
            System.out.println("Стек не заполнен");
            return 0;
        } else {
            return stck[tos--];
        }
    }
}

class StackSample {
    public static void main(String[] args) {

        // Поместить числа в стек
        Stack stack = new Stack();
        for (int i = 0; i < 12; i++) {
            stack.push(i);
        }

        // Извлечь числа из стека
        System.out.println("Содержимое стека:");
        for (int i = 0; i < 12; i++) {
            System.out.println(stack.pop());
        }
    }
}

/*  Вывод программы:

    Помещено значение 0
    Помещено значение 1
    Помещено значение 2
    Помещено значение 3
    Помещено значение 4
    Помещено значение 5
    Помещено значение 6
    Помещено значение 7
    Помещено значение 8
    Помещено значение 9
    Стек заполнен
    Стек заполнен
    Содержимое стека:
    9
    8
    7
    6
    5
    4
    3
    2
    1
    0
    Стек не заполнен
    0
    Стек не заполнен
    0
*/
